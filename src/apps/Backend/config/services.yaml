# This file is the entry point to configure your own services.
parameters:
    exception_to_status:
        App\Shared\Domain\Exception\EntityNotFoundException: 404
        App\Infrastructure\Exception\ValidationErrorsException: 422
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: true

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Backend\:
        resource: '../src/*'
        exclude:
            - '../src/Kernel.php'
    App\:
        resource: '../../../src/*'
        exclude:
            - '../../../src/Domain/Entity/*'
            - '../../../src/Domain/ValueObject/*'
            - '../../../src/Application/Dto/*'
            - '../../../src/Application/Command/Impl/*'
            - '../../../src/Application/Query/Impl/*'
            - '../../../src/Infrastructure/Persistence/Doctrine/Migrations/*'
            - '../../../src/Shared/Domain/ValueObject/*'
            - '../../../src/Shared/Application/Attributes/*'
            - '../../../src/Shared/Application/Dto/*'
    Backend\Listener\ExceptionListener:
        arguments:
            - '@Psr\Log\LoggerInterface'
            - "%kernel.environment%"
            - "%exception_to_status%"
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.exception' }
    App\Domain\Service\ChannelProviderCollection:
        arguments:
            - !tagged_iterator { tag: app.provider }
    App\Infrastructure\Provider\Mailgun\MailgunProvider:
        arguments:
            $isEnabled: '%env(bool:MAILGUN_ENABLED)%'
        tags:
            - { name: 'app.provider', priority: 2 }
    App\Infrastructure\Provider\AmazonSES\AmazonSESProvider:
        arguments:
            $isEnabled: '%env(bool:AMAZON_SES_ENABLED)%'
        tags:
            - { name: 'app.provider', priority: 0 }
    App\Infrastructure\Provider\Twilio\TwilioProvider:
        arguments:
            $isEnabled: '%env(bool:TWILIO_ENABLED)%'
        tags:
            - { name: 'app.provider', priority: 1 }
    App\Infrastructure\Provider\Mailgun\MailgunClient:
        arguments:
            $domain: '%env(MAILGUN_DOMAIN)%'
            $apiKey: '%env(MAILGUN_API_KEY)%'
    App\Infrastructure\Provider\Twilio\TwilioClient:
        arguments:
            $sid: '%env(TWILIO_SID)%'
            $token: '%env(TWILIO_TOKEN)%'
            $twilioPhone: '%env(TWILIO_PHONE)%'
    App\Domain\Strategy\ProviderStrategy: '@App\Domain\Strategy\FirstAvailableProviderStrategy'
    command_handlers:
        namespace: App\Application\Command\Handler\
        resource: '../../../src/Application/Command/Handler/*'
        tags:
            - { name: messenger.message_handler, bus: command.bus }
#    query_handlers:
#        namespace: App\Application\Query\Handler
#        resource: '../../../src/Application/Query/Handler/*'
#        tags:
#            - { name: messenger.message_handler, bus: query.bus }
